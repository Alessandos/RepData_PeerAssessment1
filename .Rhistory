print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
z <- sd(y)
print(z)
y
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
print(sd(y))
y <- apply(x, 2, mean)
y
z <- apply(x, 2, sd)
z
print(sd(y))
y
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
y
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
x <- matrix(runif(100000, min=0, max=1), ncol=1000, nrow=100)
y <- apply(x, 2, mean)
##z <- apply(x, 2, sd)
print(sd(y))
1/(10*sqrt(12))
?ppois
ppois(10, lambda=5)
ppois(10, lambda=15)
ppois(10, lambda=5/3)
ppois(10, lambda=15)
choose(9,3)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- g + geom_point()
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
?qplot
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
?panel
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
data(movies)
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stat_smooth(method="loess")
qplot(votes, rating, data = movies) + stat_smooth(method="loess")
qplot(votes, rating, data = movies, panel = panel.loess)
?panel
qplot(votes, rating, data = movies, panel = panel.loess())
?panel.loess
library(ggplot2)
x <- 1:50
y <- 4:53
qplot(x, y) + geom_smooth()
qplot(x, y) + stat_smooth(method="loess")
qplot(x, y, smooth = "loess")
qplot(x, y, panel = panel.loess)
y[8] = 20, y[9] = 22
y <- 4:53
y[8] = 20; y[9] = 22
qplot(x, y) + geom_smooth()
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
qplot(x, y) + stat_smooth(method="loess")
qplot(x, y, smooth = "loess")
qplot(x, y, panel = panel.loess)
qplot(x, y) + stat_smooth(method="loess")
x <- 1:1001
y <- 4:1003
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
x <- 1:1001
y <- 4:1004
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
x <- 1:101
y <- 4:104
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth(method="loess")
qplot(votes, rating, data = movies, smooth = "loess")
x <- 1:101
y <- 4:104
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
qplot(x, y) + stats_smooth("loess")
qplot(x, y, smooth = "loess")
qplot(x, y, panel = panel.loess)
library(lattice)
qplot(x, y, panel = panel.loess)
qplot(x, y, panel = panel.loess)
qplot(x, y, smooth = "loess")
########################################################
x <- 1:101
y <- 4:104
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth()
qplot(x, y) + stats_smooth("loess")
qplot(x, y, smooth = "loess")
qplot(x, y, panel = panel.loess)
########################################################
#######################################################
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
#######################################################
install.packages("ggplot2")
library(ggplot2)
#######################################################
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
#######################################################
install.packages("lattice")
library(lattice)
install.packages("lattice")
qplot(votes, rating, data = movies, panel = panel.loess)
library(lattice)
library(ggplot2)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(x, y) + geom_smooth()
x <- 1:51
y <- 4:54
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth() + geom_smooth(method="gam")
qplot(x, y) + stats_smooth("loess")
qplot(x, y, smooth = "loess")
qplot(x, y, panel = panel.loess)
library(lattice)
qplot(x, y, panel = panel.loess)
x <- 1:41
y <- 4:44
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + geom_smooth() + geom_smooth(method="gam")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?axis
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month, axis(col="red"))
?axis
?panel.abline
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month, panel.abline(mean))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month, panel.abline(h=mean(Ozone)))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month,
panel.abline(h=mean(Ozone),lty=2))
panel.abline(h=mean(Ozone),lty=2)
?qplot
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
xyplot(weight ~ Time | Diet, BodyWeight, axis="lalala")
xyplot(weight ~ Time | Diet, BodyWeight, panel.abline(h=mean(weight))
)
xyplot(weight ~ Time | Diet, BodyWeight, text("lalalal"))
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight,...){
panel.xyplot(Time, weight,...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight,...){
panel.xyplot(weight ~ Time,...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
library(lattice)
data(airquality)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(weight, Time ...){
panel.xyplot(weight, Time ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(weight, Time, ...){
panel.xyplot(weight ~ Time, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
})
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
xyplot(weight ~ Time | Diet * BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ Time | Diet * BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
xyplot(weight ~ time | Diet, BodyWeight)
xyplot(weight ~ time | Diet, BodyWeight)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight,
panel=function(Time, weight, ...){
panel.xyplot(Time, weight, ...)
panel.abline(h=median(weight), lty=2)
})
View(Bodyweight)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
xyplot(Wind ~ Ozone | factor(Month), data=airquality,
panel=function(Ozone, Wind, ...){
panel.xyplot(Ozone, Wind, ...)
panel.abline(h=mean(Wind), lty=2)
})
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
xyplot(Wind ~ Ozone | factor(Month), data=airquality,
panel=function(Ozone, Wind, ...){
panel.xyplot(Ozone, Wind, ...)
panel.abline(h=mean(Wind), lty=2)
})
?panel
?xyplot
xyplot(Wind ~ Ozone , data=airquality,
panel=function(Ozone, Wind, ...){
panel.xyplot(Ozone, Wind, ...)
panel.abline(h=mean(Wind), lty=2)
})
xyplot(Wind ~ Ozone | factor(Month), data=airquality,
panel=function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h=mean(y), lty=2)
})
x <- 1:41
y <- 4:44
y[8] = 20; y[9] = 22; y[10] = 24; y[11] = 27; y[12] = 30
qplot(x, y) + stat_smooth(method="loess")
setwd("C:/Users/Ubi/Desktop/RepData/RepData_PeerAssessment1")
getwd()
ACT <- read.csv("activity.csv", header=T, colClasses=c("integer", "Date", "integer"))
stepsPerDay <- t(unlist(tapply(ACT[,1], ACT[,2], sum, na.rm=T)))
hist(stepsPerDay)
mean(stepsPerDay)
median(stepsPerDay)
abline(v=mean(stepsPerDay), col="red")
abline(v=median(stepsPerDay), col="blue")
## What is the average daily activity pattern?
averagePerIntervall <- unlist(tapply(ACT[,1], ACT[,3], mean, na.rm=T))
plot(names(averagePerIntervall), averagePerIntervall, type="l",
xlab="Intervall Number", lwd=2, col="blue")
maxi <- max(averagePerIntervall)
maxi
max(averagePerIntervall)==maxi
averagePerIntervall
averagePerIntervall==maxi
averagePerIntervall[logo]
logo <- averagePerIntervall==maxi
averagePerIntervall[logo]
names(averagePerIntervall[logo])
nrow(ACT)
nrow(complete.cases(ACT)
)
complete.cases(ACT)
sum(complete.cases(ACT))
nrow(ACT) - sum(complete.cases(ACT))
sum(is.na(ACT[,1]))
sum(is.na(ACT[,1]))
sum(is.na(ACT[,2]))
sum(is.na(ACT[,3]))
nrow(ACT)
nrow(ACT) - sum(complete.cases(ACT))
?impute
ACT
ACT <- read.csv("activity.csv", header=T, colClasses=c("integer", "Date", "integer"))
ACT
head(ACT)
tail(ACT)
averagePerIntervall
class(ACT)
?dcast
abc <- data.frame(intervall=as.integer(names(averagePerIntervall)), steps=averagePerIntervall)
abc
ACTmerged <- merge(ACT, abc, by.X="intervall", by.y="intervall")
abc <- data.frame(intervall=as.integer(names(averagePerIntervall)), steps1=averagePerIntervall)
ACTmerged <- merge(ACT, abc, by.X="intervall", by.y="intervall")
abc
ACT
ACTmerged <- merge(ACT, abc, by.X="intervall", by.y="intervall")
abc <- data.frame("intervall"=as.integer(names(averagePerIntervall)), "steps1"=averagePerIntervall)
ACTmerged <- merge(ACT, abc, by.X="intervall", by.y="intervall")
abc
ACTmerged <- merge(ACT, abc, by.X="intervall", by.y="intervall", all=T)
ACTmerged <- merge(ACT, abc, by.x="intervall", by.y="intervall", all=T)
colnames(ACT)
abc <- data.frame("interval"=as.integer(names(averagePerIntervall)), "steps1"=averagePerIntervall)
ACTmerged <- merge(ACT, abc, by.x="interval", by.y="interval", all=T)
ACTmerged
ACTmerged
ACTmerged$step <- as.numeric(ACTmerged$step)
ACTmerged$step <- as.numeric(ACTmerged$step)
ACTmerged$step
colnames(ACTmerged)
ACTmerged$steps <- as.numeric(ACTmerged$steps)
ACTmerged$steps[is.na(ACTmerged$steps)] <- ACTmerged$steps1[is.na(ACT[,1])]
ACTmerged$steps
is.na(ACTmerged[,1])
is.na(ACTmerged[,2])
is.na(ACTmerged[,3])
is.na(ACTmerged[,4])
is.na(ACTmerged[,5])
sum(is.na(ACTmerged[,1]))
sum(is.na(ACTmerged[,2]))
sum(is.na(ACTmerged[,3]))
sum(is.na(ACTmerged[,4]))
stepsPerDay1 <- unlist(tapply(ACTmerged[,1], ACTmerged[,2], sum))
stepsPerDay1
stepsPerDay1 <- t(unlist(tapply(ACTmerged[,1], ACTmerged[,2], sum)))
stepsPerDay1
ACTmerged
head(ACTmerged)
stepsPerDay1 <- unlist(tapply(ACTmerged[,2], ACTmerged[,3], sum))
hist(stepsPerDay1, xlab="Steps per Day", main="Total Number of Steps per Day")
abline(v=mean(stepsPerDay1, na.rm=T), col="red")
abline(v=median(stepsPerDay1, na.rm=T), col="blue")
weekday(ACTmerged$date)
weekdays(ACTmerged$date)
Sys.setlocale(category = "LC_TIME", locale = "US")
weekdays(ACTmerged$date)
dayCategoryBool <- weekdays(ACTmerged$date)=="Saturday" | weekdays(ACTmerged$date)=="Sunday"
dayCategory <- seq_along(dayCategoryBool)
dayCategory[dayCategoryBool] <- "weekend"
dayCategory[!dayCategoryBool] <- "weekday"
ACTmerged$dayCat <- as.factor(dayCategory)
ACTmerged$dayCat
dataSource <- tapply(average=mean(ACTmerged$steps, c(ACTmerged$interval, ACTmerged$dayCat), mean)
)
dataSource <- apply(average=mean(ACTmerged$steps, c(ACTmerged$interval, ACTmerged$dayCat), mean))
?mean
dataSource <- tapply(average=mean(ACTmerged$steps, c(ACTmerged$interval, ACTmerged$dayCat), mean))
x
dataSource <- tapply(ACTmerged$steps, c(ACTmerged$interval, ACTmerged$dayCat), mean)
ACTmerged$steps
ACTmerged$interval
ACTmerged$dayCat
dataSource <- tapply(ACTmerged$steps, c(ACTmerged$interval, ACTmerged$dayCat), sum)
dataSource <- tapply(ACTmerged$steps, ACTmerged$interval, sum)
dataSource
dataSource <- tapply(ACTmerged$steps, ACTmerged$interval, mean)
dataSource
